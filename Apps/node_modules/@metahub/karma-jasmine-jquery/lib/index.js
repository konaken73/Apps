'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _karmaJasmine = require('karma-jasmine');

var _karmaJasmine2 = _interopRequireDefault(_karmaJasmine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Karma framework function.
 * Call the `karma-jasmine` module if corresponding files are not already and included and add the jquery + jasmine-jquery bundle to the Karma files (after the `karma-jasmine` files in present, in first position otherwise).
 *
 * @method framework
 * @param {Array<string>} files list of current Karma files.
 */
function framework(files) {
	let insertIndex = 0;

	for (let len = files.length, i = len - 1; i >= 0; i--) {
		if (files[i].pattern.search(/karma-jasmine(\/|\\)lib(\/|\\).*\.js/) !== -1) {
			insertIndex = i + 1;
			break;
		}
	}

	files.splice(insertIndex, 0, {
		pattern: _path2.default.resolve(require.resolve('./jasmine-jquery.bundle.js')),
		included: true,
		served: true,
		watched: false
	});

	if (insertIndex === 0) {
		_karmaJasmine2.default['framework:jasmine'][1](files);
	}
}

framework.$inject = ['config.files'];

module.exports = {
	'framework:jasmine-jquery': ['factory', framework]
};
//# sourceMappingURL=index.js.map